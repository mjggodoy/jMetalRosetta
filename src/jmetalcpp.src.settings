# -*- mode:python;indent-tabs-mode:t;show-trailing-whitespace:t; -*-
#
# Project settings for rosetta sources
# (c) Copyright Rosetta Commons Member Institutions.
# (c) This file is part of the Rosetta sof tware suite and is made available under license.
# (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
# (c) For more information, see http://www.rosettacommons.org. Questions about this can be
# (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

#Do not modify this file and check it in.
#First copy this file to pilot_apps.src.settings.my, then modify it to include the
#sources of the pilot applications you want built.
#Remember also to setup the devel.src.settings.my file to include any experimental
#files that your pilot application needs.

# Helpful hint:
#  When using cmake/make_project.py, the .settings.my file will override the usual .settings
#  file as the list of .cc files to compile.  It will not be checked into git (it is listed in .gitignore).
#  When ready for primetime, move your apps into this .settings file.

sources = {
	"jmetalcpp/core" : [
		"Algorithm",
		"Operator", 
		"Problem", 
		"Solution", 
		"SolutionSet", 
		"SolutionType", 
		"Variable", 
		],
	"jmetalcpp/encodings/solutionType" : [
		"ArrayRealSolutionType",
		"BinaryRealSolutionType",
		"BinarySolutionType",
		"RealSolutionType",		
		],

	"jmetalcpp/encodings/variable" : [
		"ArrayReal",
		"Binary",
		"BinaryReal",
		"RealJM",		
		],

	"jmetalcpp/metaheuristics/singleObjective/cmaes" : [
		"CMAES",
		],
	"jmetalcpp/metaheuristics/singleObjective/cmaes/utils" : [
		"UtilsCMAES",
		],
	"jmetalcpp/metaheuristics/singleObjective/differentialEvolution" : [
		"DE",
		"DESeq",
		],
	
	"jmetalcpp/metaheuristics/singleObjective/geneticAlgorithm" : [
		"gGA",
		"gGASeq",
		"ssGA",
		"ssGASeq"
		],
	"jmetalcpp/metaheuristics/singleObjective/particleSwarmOptimization" : [
		"PSO",
		"PSOSeq",
		"StandardPSO2007",
		"StandardPSO2011",
		],

	"jmetalcpp/operators/crossover" : [
		"Crossover",
		"DifferentialEvolutionCrossover",
		"HUXCrossover",
		"SBXCrossover",		
		"SinglePointCrossover",
		],
	
	"jmetalcpp/operators/mutation" : [
		"BitFlipMutation",
		"Mutation",
		"NonUniformMutation",
		"PolynomialMutation",		
		"UniformMutation",
		],

	"jmetalcpp/operators/selection" : [
		"BestSolutionSelection",
		"BinaryTournament",
		"BinaryTournament2",
		"DifferentialEvolutionSelection",		
		"RandomSelection",
		"Selection",
		"WorstSolutionSelection",
		],

	"jmetalcpp/problems/singleObjective" : [ # Maria 10/5/2017: Sphere problem to test
		"Sphere",
		"AbInitio",
		],
	
	"jmetalcpp/util/archive" : [
		"AdaptiveGridArchive",
		"Archive",
		"CrowdingArchive",
		],
	
	"jmetalcpp/util/comparators" : [
		"Comparator",
		"CrowdingComparator",
		"CrowdingDistanceComparator",
		"DominanceComparator",
		"EpsilonDominanceComparator",
		"EpsilonObjectiveComparator",
		"EqualSolutions",
		"ObjectiveComparator",
		"OverallConstraintViolationComparator",
		"RankComparator",
		"SolutionComparator",
		],

	"jmetalcpp/util/wrapper" : [
		"Xreal",
		],

	"jmetalcpp/util" : [
		"AdaptiveGrid",
		"AdaptiveRandomNeighborhood",
		"Distance",
		"NonDominatedSolutionList",
		"PermutationUtility",
		"PseudoRandom",
		"RandomGenerator",
		"Ranking",
		],
}

include_path = [ ]
library_path = [ ]
libraries	 = [ ]
subprojects  = [
	# "protocols.1",
	# "core.5",
	"core.4",
	"core.3",
	"core.2",
	"core.1",
	"basic",
	"numeric",
	"utility",
	"ObjexxFCL",
	"z",
	"cppdb",
        "sqlite3"]
