namespace DomainAssembly { FileOptionKey const da_linker_file_rna( "DomainAssembly:da_linker_file_rna" );  }
namespace DomainAssembly { StringOptionKey const residues_repack_only( "DomainAssembly:residues_repack_only" );  }
namespace DomainAssembly { FileOptionKey const da_eval_pose_map( "DomainAssembly:da_eval_pose_map" );  }
namespace edensity { BooleanOptionKey const edensity( "edensity" );  }
namespace edensity { BooleanOptionKey const debug( "edensity:debug" );  }
namespace edensity { StringOptionKey const mapfile( "edensity:mapfile" );  }
namespace edensity { RealOptionKey const mapreso( "edensity:mapreso" );  }
namespace edensity { RealOptionKey const grid_spacing( "edensity:grid_spacing" );  }
namespace edensity { RealOptionKey const centroid_density_mass( "edensity:centroid_density_mass" );  }
namespace edensity { IntegerOptionKey const sliding_window( "edensity:sliding_window" );  }
namespace edensity { BooleanOptionKey const cryoem_scatterers( "edensity:cryoem_scatterers" );  }
namespace edensity { RealOptionKey const force_apix( "edensity:force_apix" );  }
namespace edensity { RealOptionKey const fastdens_wt( "edensity:fastdens_wt" );  }
namespace edensity { RealVectorOptionKey const fastdens_params( "edensity:fastdens_params" );  }
namespace edensity { BooleanOptionKey const legacy_fastdens_score( "edensity:legacy_fastdens_score" );  }
namespace edensity { RealOptionKey const sliding_window_wt( "edensity:sliding_window_wt" );  }
namespace edensity { BooleanOptionKey const score_sliding_window_context( "edensity:score_sliding_window_context" );  }
namespace edensity { RealOptionKey const whole_structure_ca_wt( "edensity:whole_structure_ca_wt" );  }
namespace edensity { RealOptionKey const whole_structure_allatom_wt( "edensity:whole_structure_allatom_wt" );  }
namespace edensity { BooleanOptionKey const debug_derivatives( "edensity:debug_derivatives" );  }
namespace edensity { StringOptionKey const realign( "edensity:realign" );  }
namespace edensity { StringOptionKey const membrane_axis( "edensity:membrane_axis" );  }
namespace edensity { RealOptionKey const atom_mask( "edensity:atom_mask" );  }
namespace edensity { RealOptionKey const atom_mask_min( "edensity:atom_mask_min" );  }
namespace edensity { RealOptionKey const ca_mask( "edensity:ca_mask" );  }
namespace edensity { BooleanOptionKey const score_symm_complex( "edensity:score_symm_complex" );  }
namespace edensity { RealOptionKey const sc_scaling( "edensity:sc_scaling" );  }
namespace edensity { IntegerOptionKey const n_kbins( "edensity:n_kbins" );  }
namespace edensity { BooleanOptionKey const unmask_bb( "edensity:unmask_bb" );  }
namespace edensity { BooleanOptionKey const render_density( "edensity:render_density" );  }
namespace enzdes { BooleanOptionKey const enzdes( "enzdes" );  }
namespace enzdes { StringOptionKey const checkpoint( "enzdes:checkpoint" );  }
namespace enzdes { BooleanOptionKey const enz_score( "enzdes:enz_score" );  }
namespace enzdes { BooleanOptionKey const enz_repack( "enzdes:enz_repack" );  }
namespace enzdes { BooleanOptionKey const cst_opt( "enzdes:cst_opt" );  }
namespace enzdes { BooleanOptionKey const cst_predock( "enzdes:cst_predock" );  }
namespace enzdes { RealOptionKey const trans_magnitude( "enzdes:trans_magnitude" );  }
namespace enzdes { RealOptionKey const rot_magnitude( "enzdes:rot_magnitude" );  }
namespace enzdes { RealOptionKey const dock_trials( "enzdes:dock_trials" );  }
namespace enzdes { BooleanOptionKey const cst_min( "enzdes:cst_min" );  }
namespace enzdes { BooleanOptionKey const cst_design( "enzdes:cst_design" );  }
namespace enzdes { IntegerOptionKey const design_min_cycles( "enzdes:design_min_cycles" );  }
namespace enzdes { BooleanOptionKey const make_consensus_mutations( "enzdes:make_consensus_mutations" );  }
namespace enzdes { BooleanOptionKey const bb_min( "enzdes:bb_min" );  }
namespace enzdes { RealOptionKey const bb_min_allowed_dev( "enzdes:bb_min_allowed_dev" );  }
namespace enzdes { RealOptionKey const loop_bb_min_allowed_dev( "enzdes:loop_bb_min_allowed_dev" );  }
namespace enzdes { RealOptionKey const minimize_ligand_torsions( "enzdes:minimize_ligand_torsions" );  }
namespace enzdes { RealOptionKey const minimize_all_ligand_torsions( "enzdes:minimize_all_ligand_torsions" );  }
namespace enzdes { BooleanOptionKey const chi_min( "enzdes:chi_min" );  }
namespace enzdes { BooleanOptionKey const min_all_jumps( "enzdes:min_all_jumps" );  }
namespace enzdes { BooleanOptionKey const cst_dock( "enzdes:cst_dock" );  }
namespace enzdes { BooleanOptionKey const run_ligand_motifs( "enzdes:run_ligand_motifs" );  }
namespace enzdes { BooleanOptionKey const enz_debug( "enzdes:enz_debug" );  }
namespace enzdes { FileOptionKey const cstfile( "enzdes:cstfile" );  }
namespace enzdes { FileOptionKey const enz_loops_file( "enzdes:enz_loops_file" );  }
namespace enzdes { BooleanOptionKey const flexbb_protocol( "enzdes:flexbb_protocol" );  }
namespace enzdes { BooleanOptionKey const remodel_protocol( "enzdes:remodel_protocol" );  }
namespace enzdes { BooleanOptionKey const kic_loop_sampling( "enzdes:kic_loop_sampling" );  }
namespace enzdes { StringOptionKey const dump_loop_samples( "enzdes:dump_loop_samples" );  }
namespace enzdes { BooleanOptionKey const fix_catalytic_aa( "enzdes:fix_catalytic_aa" );  }
namespace enzdes { IntegerOptionKey const additional_packing_ligand_rb_confs( "enzdes:additional_packing_ligand_rb_confs" );  }
namespace enzdes { IntegerOptionKey const ex_catalytic_rot( "enzdes:ex_catalytic_rot" );  }
namespace enzdes { IntegerOptionKey const single_loop_ensemble_size( "enzdes:single_loop_ensemble_size" );  }
namespace enzdes { IntegerOptionKey const loop_generator_trials( "enzdes:loop_generator_trials" );  }
namespace enzdes { BooleanOptionKey const no_catres_min_in_loopgen( "enzdes:no_catres_min_in_loopgen" );  }
namespace enzdes { RealOptionKey const mc_kt_low( "enzdes:mc_kt_low" );  }
namespace enzdes { RealOptionKey const mc_kt_high( "enzdes:mc_kt_high" );  }
namespace enzdes { RealOptionKey const min_cacb_deviation( "enzdes:min_cacb_deviation" );  }
namespace enzdes { RealOptionKey const max_bb_deviation( "enzdes:max_bb_deviation" );  }
namespace enzdes { RealOptionKey const max_bb_deviation_from_startstruct( "enzdes:max_bb_deviation_from_startstruct" );  }
namespace enzdes { IntegerOptionKey const remodel_trials( "enzdes:remodel_trials" );  }
namespace enzdes { BooleanOptionKey const remodel_secmatch( "enzdes:remodel_secmatch" );  }
namespace enzdes { BooleanOptionKey const dump_inverse_rotamers( "enzdes:dump_inverse_rotamers" );  }
namespace enzdes { RealOptionKey const remodel_aggressiveness( "enzdes:remodel_aggressiveness" );  }
namespace enzdes { RealOptionKey const favor_native_res( "enzdes:favor_native_res" );  }
namespace enzdes { BooleanOptionKey const detect_design_interface( "enzdes:detect_design_interface" );  }
namespace enzdes { BooleanOptionKey const include_catres_in_interface_detection( "enzdes:include_catres_in_interface_detection" );  }
namespace enzdes { BooleanOptionKey const arg_sweep_interface( "enzdes:arg_sweep_interface" );  }
namespace enzdes { RealOptionKey const arg_sweep_cutoff( "enzdes:arg_sweep_cutoff" );  }
namespace enzdes { RealOptionKey const cut1( "enzdes:cut1" );  }
namespace enzdes { RealOptionKey const cut2( "enzdes:cut2" );  }
namespace enzdes { RealOptionKey const cut3( "enzdes:cut3" );  }
namespace enzdes { RealOptionKey const cut4( "enzdes:cut4" );  }
namespace enzdes { RealOptionKey const lig_packer_weight( "enzdes:lig_packer_weight" );  }
namespace enzdes { BooleanOptionKey const no_unconstrained_repack( "enzdes:no_unconstrained_repack" );  }
namespace enzdes { RealOptionKey const secmatch_Ecutoff( "enzdes:secmatch_Ecutoff" );  }
namespace enzdes { FileOptionKey const change_lig( "enzdes:change_lig" );  }
namespace enzdes { StringOptionKey const process_ligrot_separately( "enzdes:process_ligrot_separately" );  }
namespace enzdes { BooleanOptionKey const start_from_random_rb_conf( "enzdes:start_from_random_rb_conf" );  }
namespace enzdes { RealOptionKey const bb_bump_cutoff( "enzdes:bb_bump_cutoff" );  }
namespace enzdes { RealOptionKey const sc_sc_bump_cutoff( "enzdes:sc_sc_bump_cutoff" );  }
namespace enzdes { BooleanOptionKey const no_packstat_calculation( "enzdes:no_packstat_calculation" );  }
namespace enzdes { StringOptionKey const compare_native( "enzdes:compare_native" );  }
namespace enzdes { BooleanOptionKey const final_repack_without_ligand( "enzdes:final_repack_without_ligand" );  }
namespace enzdes { BooleanOptionKey const dump_final_repack_without_ligand_pdb( "enzdes:dump_final_repack_without_ligand_pdb" );  }
namespace enzdes { BooleanOptionKey const parser_read_cloud_pdb( "enzdes:parser_read_cloud_pdb" );  }
namespace fast_loops { BooleanOptionKey const fast_loops( "fast_loops" );  }
namespace fast_loops { RealOptionKey const window_accept_ratio( "fast_loops:window_accept_ratio" );  }
namespace fast_loops { IntegerOptionKey const nr_scored_sampling_passes( "fast_loops:nr_scored_sampling_passes" );  }
namespace fast_loops { IntegerOptionKey const nr_scored_fragments( "fast_loops:nr_scored_fragments" );  }
namespace fast_loops { IntegerOptionKey const min_breakout_good_loops( "fast_loops:min_breakout_good_loops" );  }
namespace fast_loops { IntegerOptionKey const min_breakout_fast_loops( "fast_loops:min_breakout_fast_loops" );  }
namespace fast_loops { IntegerOptionKey const min_good_loops( "fast_loops:min_good_loops" );  }
namespace fast_loops { IntegerOptionKey const min_fast_loops( "fast_loops:min_fast_loops" );  }
namespace fast_loops { RealOptionKey const vdw_delta( "fast_loops:vdw_delta" );  }
namespace fast_loops { IntegerOptionKey const give_up( "fast_loops:give_up" );  }
namespace fast_loops { RealOptionKey const chainbreak_max( "fast_loops:chainbreak_max" );  }
namespace fast_loops { FileOptionKey const fragsample_score( "fast_loops:fragsample_score" );  }
namespace fast_loops { FileOptionKey const fragsample_patch( "fast_loops:fragsample_patch" );  }
namespace fast_loops { FileOptionKey const overwrite_filter_scorefxn( "fast_loops:overwrite_filter_scorefxn" );  }
namespace fast_loops { FileOptionKey const patch_filter_scorefxn( "fast_loops:patch_filter_scorefxn" );  }
namespace fast_loops { FileOptionKey const filter_cst_file( "fast_loops:filter_cst_file" );  }
namespace fast_loops { RealOptionKey const filter_cst_weight( "fast_loops:filter_cst_weight" );  }
namespace fast_loops { FileOptionKey const fast_relax_sequence_file( "fast_loops:fast_relax_sequence_file" );  }
namespace flexpack { BooleanOptionKey const flexpack( "flexpack" );  }
namespace flexpack { namespace annealer { BooleanOptionKey const annealer( "flexpack:annealer" );  } }
namespace flexpack { namespace annealer { RealOptionKey const inner_iteration_scale( "flexpack:annealer:inner_iteration_scale" );  } }
namespace flexpack { namespace annealer { RealOptionKey const outer_iteration_scale( "flexpack:annealer:outer_iteration_scale" );  } }
namespace flexpack { namespace annealer { RealOptionKey const fixbb_substitutions_scale( "flexpack:annealer:fixbb_substitutions_scale" );  } }
namespace flexpack { namespace annealer { RealOptionKey const pure_movebb_substitutions_scale( "flexpack:annealer:pure_movebb_substitutions_scale" );  } }
namespace flexpack { namespace annealer { RealOptionKey const rotsub_movebb_substitutions_scale( "flexpack:annealer:rotsub_movebb_substitutions_scale" );  } }
namespace flexPepDocking { BooleanOptionKey const flexPepDocking( "flexPepDocking" );  }
namespace flexPepDocking { StringOptionKey const params_file( "flexPepDocking:params_file" );  }
namespace flexPepDocking { IntegerOptionKey const peptide_anchor( "flexPepDocking:peptide_anchor" );  }
namespace flexPepDocking { StringOptionKey const receptor_chain( "flexPepDocking:receptor_chain" );  }
namespace flexPepDocking { StringOptionKey const peptide_chain( "flexPepDocking:peptide_chain" );  }
namespace flexPepDocking { BooleanOptionKey const pep_fold_only( "flexPepDocking:pep_fold_only" );  }
namespace flexPepDocking { BooleanOptionKey const lowres_abinitio( "flexPepDocking:lowres_abinitio" );  }
namespace flexPepDocking { BooleanOptionKey const lowres_preoptimize( "flexPepDocking:lowres_preoptimize" );  }
namespace flexPepDocking { BooleanOptionKey const flexPepDockingMinimizeOnly( "flexPepDocking:flexPepDockingMinimizeOnly" );  }
namespace flexPepDocking { BooleanOptionKey const extend_peptide( "flexPepDocking:extend_peptide" );  }
namespace flexPepDocking { BooleanOptionKey const place_peptide_on_binding_site( "flexPepDocking:place_peptide_on_binding_site" );  }
namespace flexPepDocking { IntegerOptionKey const sample_pcs( "flexPepDocking:sample_pcs" );  }
namespace flexPepDocking { BooleanOptionKey const SlideIntoContact( "flexPepDocking:SlideIntoContact" );  }
namespace flexPepDocking { BooleanOptionKey const recalculate_foldtree( "flexPepDocking:recalculate_foldtree" );  }
namespace flexPepDocking { BooleanOptionKey const pep_refine( "flexPepDocking:pep_refine" );  }
namespace flexPepDocking { BooleanOptionKey const rbMCM( "flexPepDocking:rbMCM" );  }
namespace flexPepDocking { BooleanOptionKey const torsionsMCM( "flexPepDocking:torsionsMCM" );  }
namespace flexPepDocking { BooleanOptionKey const peptide_loop_model( "flexPepDocking:peptide_loop_model" );  }
namespace flexPepDocking { BooleanOptionKey const backrub_peptide( "flexPepDocking:backrub_peptide" );  }
namespace flexPepDocking { BooleanOptionKey const boost_fa_atr( "flexPepDocking:boost_fa_atr" );  }
namespace flexPepDocking { BooleanOptionKey const ramp_fa_rep( "flexPepDocking:ramp_fa_rep" );  }
namespace flexPepDocking { BooleanOptionKey const ramp_rama( "flexPepDocking:ramp_rama" );  }
namespace flexPepDocking { BooleanOptionKey const flexpep_score_only( "flexPepDocking:flexpep_score_only" );  }
namespace flexPepDocking { FileOptionKey const ref_startstruct( "flexPepDocking:ref_startstruct" );  }
namespace flexPepDocking { BooleanOptionKey const use_cen_score( "flexPepDocking:use_cen_score" );  }
namespace flexPepDocking { BooleanOptionKey const design_peptide( "flexPepDocking:design_peptide" );  }
namespace flexPepDocking { IntegerOptionKey const rep_ramp_cycles( "flexPepDocking:rep_ramp_cycles" );  }
namespace flexPepDocking { IntegerOptionKey const mcm_cycles( "flexPepDocking:mcm_cycles" );  }
namespace flexPepDocking { RealOptionKey const random_phi_psi_preturbation( "flexPepDocking:random_phi_psi_preturbation" );  }
namespace flexPepDocking { RealOptionKey const smove_angle_range( "flexPepDocking:smove_angle_range" );  }
namespace flexPepDocking { BooleanOptionKey const min_receptor_bb( "flexPepDocking:min_receptor_bb" );  }
namespace flexPepDocking { RealOptionKey const random_trans_start( "flexPepDocking:random_trans_start" );  }
namespace flexPepDocking { RealOptionKey const random_rot_start( "flexPepDocking:random_rot_start" );  }
namespace flexPepDocking { BooleanOptionKey const flexpep_prepack( "flexPepDocking:flexpep_prepack" );  }
namespace flexPepDocking { BooleanOptionKey const flexpep_noprepack1( "flexPepDocking:flexpep_noprepack1" );  }
namespace flexPepDocking { BooleanOptionKey const flexpep_noprepack2( "flexPepDocking:flexpep_noprepack2" );  }
namespace flexPepDocking { RealOptionKey const score_filter( "flexPepDocking:score_filter" );  }
namespace flexPepDocking { IntegerOptionKey const hb_filter( "flexPepDocking:hb_filter" );  }
namespace flexPepDocking { IntegerOptionKey const hotspot_filter( "flexPepDocking:hotspot_filter" );  }
namespace flexPepDocking { StringOptionKey const frag5( "flexPepDocking:frag5" );  }
namespace flexPepDocking { RealOptionKey const frag9_weight( "flexPepDocking:frag9_weight" );  }
namespace flexPepDocking { RealOptionKey const frag5_weight( "flexPepDocking:frag5_weight" );  }
namespace flexPepDocking { RealOptionKey const frag3_weight( "flexPepDocking:frag3_weight" );  }
namespace flexPepDocking { BooleanOptionKey const pSer2Asp_centroid( "flexPepDocking:pSer2Asp_centroid" );  }
namespace flexPepDocking { BooleanOptionKey const pSer2Glu_centroid( "flexPepDocking:pSer2Glu_centroid" );  }
namespace flexPepDocking { BooleanOptionKey const dumpPDB_abinitio( "flexPepDocking:dumpPDB_abinitio" );  }
namespace flexPepDocking { BooleanOptionKey const dumpPDB_lowres( "flexPepDocking:dumpPDB_lowres" );  }
namespace flexPepDocking { BooleanOptionKey const dumpPDB_hires( "flexPepDocking:dumpPDB_hires" );  }
namespace FloppyTail { BooleanOptionKey const FloppyTail( "FloppyTail" );  }
namespace FloppyTail { IntegerOptionKey const flexible_start_resnum( "FloppyTail:flexible_start_resnum" );  }
namespace FloppyTail { IntegerOptionKey const flexible_stop_resnum( "FloppyTail:flexible_stop_resnum" );  }
namespace FloppyTail { StringOptionKey const flexible_chain( "FloppyTail:flexible_chain" );  }
namespace FloppyTail { RealOptionKey const shear_on( "FloppyTail:shear_on" );  }
namespace FloppyTail { BooleanOptionKey const pair_off( "FloppyTail:pair_off" );  }
namespace FloppyTail { BooleanOptionKey const publication( "FloppyTail:publication" );  }
namespace FloppyTail { BooleanOptionKey const C_root( "FloppyTail:C_root" );  }
namespace FloppyTail { BooleanOptionKey const COM_root( "FloppyTail:COM_root" );  }
namespace FloppyTail { BooleanOptionKey const force_linear_fold_tree( "FloppyTail:force_linear_fold_tree" );  }
namespace FloppyTail { BooleanOptionKey const debug( "FloppyTail:debug" );  }
namespace FloppyTail { StringOptionKey const cen_weights( "FloppyTail:cen_weights" );  }
namespace FloppyTail { BooleanOptionKey const perturb_show( "FloppyTail:perturb_show" );  }
namespace FloppyTail { IntegerOptionKey const perturb_cycles( "FloppyTail:perturb_cycles" );  }
namespace FloppyTail { RealOptionKey const perturb_temp( "FloppyTail:perturb_temp" );  }
namespace FloppyTail { IntegerOptionKey const refine_cycles( "FloppyTail:refine_cycles" );  }
namespace FloppyTail { RealOptionKey const refine_temp( "FloppyTail:refine_temp" );  }
namespace FloppyTail { IntegerOptionKey const refine_repack_cycles( "FloppyTail:refine_repack_cycles" );  }
namespace FloppyTail { namespace short_tail { BooleanOptionKey const short_tail( "FloppyTail:short_tail" );  } }
namespace FloppyTail { namespace short_tail { RealOptionKey const short_tail_fraction( "FloppyTail:short_tail:short_tail_fraction" );  } }
namespace FloppyTail { namespace short_tail { RealOptionKey const short_tail_off( "FloppyTail:short_tail:short_tail_off" );  } }
namespace flxbb { BooleanOptionKey const flxbb( "flxbb" );  }
namespace flxbb { BooleanOptionKey const view( "flxbb:view" );  }
namespace flxbb { IntegerOptionKey const ncycle( "flxbb:ncycle" );  }
namespace flxbb { RealOptionKey const constraints_sheet( "flxbb:constraints_sheet" );  }
namespace flxbb { BooleanOptionKey const constraints_sheet_include_cacb_pseudotorsion( "flxbb:constraints_sheet_include_cacb_pseudotorsion" );  }
namespace flxbb { RealOptionKey const constraints_NtoC( "flxbb:constraints_NtoC" );  }
namespace flxbb { IntegerOptionKey const filter_trial( "flxbb:filter_trial" );  }
namespace flxbb { StringOptionKey const filter_type( "flxbb:filter_type" );  }
namespace flxbb { FileOptionKey const blueprint( "flxbb:blueprint" );  }
namespace flxbb { BooleanOptionKey const movemap_from_blueprint( "flxbb:movemap_from_blueprint" );  }
namespace flxbb { namespace layer { StringOptionKey const layer( "flxbb:layer" );  } }
namespace fold_and_dock { BooleanOptionKey const fold_and_dock( "fold_and_dock" );  }
namespace fold_and_dock { BooleanOptionKey const move_anchor_points( "fold_and_dock:move_anchor_points" );  }
namespace fold_and_dock { BooleanOptionKey const set_anchor_at_closest_point( "fold_and_dock:set_anchor_at_closest_point" );  }
namespace fold_and_dock { BooleanOptionKey const rotate_anchor_to_x( "fold_and_dock:rotate_anchor_to_x" );  }
namespace fold_and_dock { RealOptionKey const trans_mag_smooth( "fold_and_dock:trans_mag_smooth" );  }
namespace fold_and_dock { RealOptionKey const rot_mag_smooth( "fold_and_dock:rot_mag_smooth" );  }
namespace fold_and_dock { RealOptionKey const rb_rot_magnitude( "fold_and_dock:rb_rot_magnitude" );  }
namespace fold_and_dock { RealOptionKey const rb_trans_magnitude( "fold_and_dock:rb_trans_magnitude" );  }
namespace fold_and_dock { IntegerOptionKey const rigid_body_cycles( "fold_and_dock:rigid_body_cycles" );  }
namespace fold_and_dock { RealOptionKey const move_anchor_frequency( "fold_and_dock:move_anchor_frequency" );  }
namespace fold_and_dock { RealOptionKey const rigid_body_frequency( "fold_and_dock:rigid_body_frequency" );  }
namespace fold_and_dock { BooleanOptionKey const rigid_body_disable_mc( "fold_and_dock:rigid_body_disable_mc" );  }
namespace fold_and_dock { RealOptionKey const slide_contact_frequency( "fold_and_dock:slide_contact_frequency" );  }
namespace fold_cst { BooleanOptionKey const fold_cst( "fold_cst" );  }
namespace fold_cst { RealOptionKey const constraint_skip_rate( "fold_cst:constraint_skip_rate" );  }
namespace fold_cst { IntegerOptionKey const violation_skip_basis( "fold_cst:violation_skip_basis" );  }
namespace fold_cst { IntegerOptionKey const violation_skip_ignore( "fold_cst:violation_skip_ignore" );  }
namespace fold_cst { BooleanOptionKey const keep_skipped_csts( "fold_cst:keep_skipped_csts" );  }
namespace fold_cst { BooleanOptionKey const no_minimize( "fold_cst:no_minimize" );  }
namespace fold_cst { BooleanOptionKey const force_minimize( "fold_cst:force_minimize" );  }
namespace fold_cst { RealVectorOptionKey const seq_sep_stages( "fold_cst:seq_sep_stages" );  }
namespace fold_cst { IntegerOptionKey const reramp_cst_cycles( "fold_cst:reramp_cst_cycles" );  }
namespace fold_cst { RealOptionKey const reramp_start_cstweight( "fold_cst:reramp_start_cstweight" );  }
namespace fold_cst { IntegerOptionKey const reramp_iterations( "fold_cst:reramp_iterations" );  }
namespace fold_cst { BooleanOptionKey const skip_on_noviolation_in_stage1( "fold_cst:skip_on_noviolation_in_stage1" );  }
namespace fold_cst { RealOptionKey const stage1_ramp_cst_cycle_factor( "fold_cst:stage1_ramp_cst_cycle_factor" );  }
namespace fold_cst { RealOptionKey const stage2_constraint_threshold( "fold_cst:stage2_constraint_threshold" );  }
namespace fold_cst { BooleanOptionKey const ignore_sequence_seperation( "fold_cst:ignore_sequence_seperation" );  }
namespace fold_cst { BooleanOptionKey const no_recover_low_at_constraint_switch( "fold_cst:no_recover_low_at_constraint_switch" );  }
namespace fold_cst { BooleanOptionKey const ramp_coord_cst( "fold_cst:ramp_coord_cst" );  }
namespace fold_from_loops { BooleanOptionKey const fold_from_loops( "fold_from_loops" );  }
namespace fold_from_loops { BooleanOptionKey const native_ca_cst( "fold_from_loops:native_ca_cst" );  }
namespace fold_from_loops { FileOptionKey const swap_loops( "fold_from_loops:swap_loops" );  }
namespace fold_from_loops { StringOptionKey const checkpoint( "fold_from_loops:checkpoint" );  }
namespace fold_from_loops { RealOptionKey const ca_csts_dev( "fold_from_loops:ca_csts_dev" );  }
namespace fold_from_loops { IntegerOptionKey const add_relax_cycles( "fold_from_loops:add_relax_cycles" );  }
namespace fold_from_loops { IntegerOptionKey const loop_mov_nterm( "fold_from_loops:loop_mov_nterm" );  }
namespace fold_from_loops { IntegerOptionKey const loop_mov_cterm( "fold_from_loops:loop_mov_cterm" );  }
namespace fold_from_loops { RealOptionKey const ca_rmsd_cutoff( "fold_from_loops:ca_rmsd_cutoff" );  }
namespace fold_from_loops { IntegerVectorOptionKey const res_design_bs( "fold_from_loops:res_design_bs" );  }
namespace fold_from_loops { FileOptionKey const clear_csts( "fold_from_loops:clear_csts" );  }
namespace fold_from_loops { BooleanOptionKey const output_centroid( "fold_from_loops:output_centroid" );  }
namespace fold_from_loops { BooleanOptionKey const add_cst_loop( "fold_from_loops:add_cst_loop" );  }
namespace frags { BooleanOptionKey const frags( "frags" );  }
namespace frags { IntegerOptionKey const j( "frags:j" );  }
