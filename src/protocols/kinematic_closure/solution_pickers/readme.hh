// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington CoMotion, email: license@uw.edu.

// #error Don't include; for documentation only.

/// @namespace protocols::kinematic_closure::solution_pickers
///
/// @brief Algorithms for picking one of the 0 to 16 solutions generated by
/// kinematic closure.
///
/// @details The classes in this namespace are intended to be constructed and
/// configured by the programmer, but used internally by samplers::KicMover.
/// So in most cases, you only have to worry about the constructor.  If you
/// want to create a new solution picking algorithm, just inherit from
/// SolutionPicker and reimplement SolutionPicker::pick_and_apply().
