// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington CoMotion, email: license@uw.edu.

/// @file protocols/cyclic_peptide_predict/SimpleCycpepPredictApplication_MPI_JobResultsSummary.hh
/// @brief A small helper class used by the SimpleCycpepPredict_MPI class -- headers.
/// @author Vikram K. Mulligan, Baker laboratory (vmullig@uw.edu)

#ifndef INCLUDED_protocols_cyclic_peptide_predict_SimpleCycpepPredictApplication_MPI_JobResultsSummary_hh
#define INCLUDED_protocols_cyclic_peptide_predict_SimpleCycpepPredictApplication_MPI_JobResultsSummary_hh

// Unit Headers
#include <protocols/cyclic_peptide_predict/SimpleCycpepPredictApplication_MPI_JobResultsSummary.fwd.hh>

// Package Headers
#include <core/pose/Pose.fwd.hh>
#include <core/types.hh>

// Project Headers

// Utility Headers
#include <utility/pointer/ReferenceCount.hh>
#include <utility/vector1.hh>

// C++ headers
#include <cstdio>

namespace protocols {
namespace cyclic_peptide_predict {

/// @brief A class for summarizing the result of an MPI-mode job run with the SimpleCycpepPredictApplication.
/// @author Vikram K. Mulligan, Baker laboratory (vmullig@uw.edu)
class SimpleCycpepPredictApplication_MPI_JobResultsSummary : public utility::pointer::ReferenceCount
{
public:
	/// @brief Constructor
	///
	SimpleCycpepPredictApplication_MPI_JobResultsSummary();

	/// @brief Constructor with options
	///
	SimpleCycpepPredictApplication_MPI_JobResultsSummary(
		int const originating_node_MPI_rank,
		core::Size const jobindex_on_originating_node,
		core::Real const &pose_energy,
		core::Real const &rmsd,
		core::Size const hbonds,
		core::Size const cis_peptide_bonds
	);

	/// @brief Explicit virtual destructor.
	///
	~SimpleCycpepPredictApplication_MPI_JobResultsSummary() override;

public:
	/// ------------- Getters -------------------------------

	/// @brief Get the MPI rank of the process that initially carried out this job.
	///
	inline int originating_node_MPI_rank() const { return originating_node_MPI_rank_; }

	/// @brief Get the local index of the job on the node on which it was carried out.
	///
	inline core::Size jobindex_on_originating_node() const { return jobindex_on_originating_node_; }

	/// @brief Get the energy of the pose generated by this job.
	///
	inline core::Real const & pose_energy() const { return pose_energy_; }

	/// @brief Get the RMSD of the pose generated by this job to native.
	///
	inline core::Real const & rmsd() const { return rmsd_; }

	/// @brief Get the number of hbonds of the pose generated by this job.
	///
	inline core::Size hbonds() const { return hbonds_; }

	/// @brief Get the number of cis-peptide bonds of the pose generated by this job.
	///
	inline core::Size cis_peptide_bonds() const { return cis_peptide_bonds_; }

	/// @brief Get the list of procs that transmitted this JobResultsSummary.
	/// @details Whenever a proc sends it to someone else, the receiving proc appends the sender's rank here.  This allows the emperor
	/// node to address an output request to the correct proc.
	inline utility::vector1 <int> const & MPI_ranks_handling_message() const { return mpi_ranks_handling_message_; }

	/// @brief Print a summary of this object to a stream.
	///
	void show( std::ostream & out ) const;

public:
	/// ------------- Setters -------------------------------

	/// @brief Set the MPI rank of the process that initially carried out this job.
	///
	void set_originating_node_MPI_rank( int const rank);

	/// @brief Set the local index of the job on the node on which it was carried out.
	///
	void set_jobindex_on_originating_node( core::Size const index);

	/// @brief Set the energy of the pose generated by this job.
	///
	void set_pose_energy( core::Real const &val );

	/// @brief Set the RMSD of the pose generated by this job to native.
	///
	void set_rmsd( core::Real const &val );

	/// @brief Set the number of hbonds of the pose generated by this job.
	///
	void set_hbonds( core::Size const val);

	/// @brief Set the number of cis-peptide bonds of the pose generated by this job.
	///
	void set_cis_peptide_bonds( core::Size const val);

	/// @brief Add a proc that handled this message to the list of procs that transmitted this JobResultsSummary.
	/// @details Whenever a proc sends it to someone else, the receiving proc appends the sender's rank here.  This allows the emperor
	/// node to address an output request to the correct proc.
	void add_MPI_rank_handling_message( int const new_proc );

private:
	/// ------------- Data -------------------------------
	/// -------- When you add new data to this class, ----
	/// -------- you must update the copy constructor ----

	/// @brief The rank of the process that actually ran the job.
	///
	int originating_node_MPI_rank_;

	/// @brief The local index of the job on the process that ran the job.
	///
	core::Size jobindex_on_originating_node_;

	/// @brief The energy of the resulting pose.
	///
	core::Real pose_energy_;

	/// @brief The rmsd of this pose to native.
	///
	core::Real rmsd_;

	/// @brief Number of hydrogen bonds.
	///
	core::Size hbonds_;

	/// @brief Number of cis-peptide bonds.
	///
	core::Size cis_peptide_bonds_;

	/// @brief The list of procs that transmitted this JobResultsSummary.
	/// @details Whenever a proc sends it to someone else, the receiving proc appends the sender's rank here.  This allows the emperor
	/// node to address an output request to the correct proc.
	utility::vector1 < int > mpi_ranks_handling_message_;

};

} //cyclic_peptide
} //protocols

#endif //INCLUDED_protocols_cyclic_peptide_predict_SimpleCycpepPredictApplication_MPI_JobResultsSummary_hh

