// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington CoMotion, email: license@uw.edu.

/// @file AssemblyConstraintsMover.hh
///
/// @brief A simple mover that reads a NativeRotamersFile generated by a an AssemblyMover run and generates the necessary
/// ResidueType constraints to add to the pose
/// @author Tim Jacobs


#ifndef INCLUDED_protocols_sewing_sampling_AssemblyConstraintsMover_HH
#define INCLUDED_protocols_sewing_sampling_AssemblyConstraintsMover_HH

// Unit Headers
#include <protocols/sewing/sampling/AssemblyConstraintsMover.fwd.hh>
#include <protocols/moves/Mover.hh>
#include <core/pack/task/operation/TaskOperation.hh>
#include <utility/tag/XMLSchemaGeneration.fwd.hh>

// Package Headers
#include <protocols/sewing/util/io.hh>

namespace protocols {
namespace sewing  {

//////////////ReadNativeRotamersFile/////////////////

class ReadNativeRotamersFile : public core::pack::task::operation::TaskOperation
{
public:
	typedef core::pack::task::operation::TaskOperation parent;

public:

	ReadNativeRotamersFile();
	virtual ~ReadNativeRotamersFile();

	core::pack::task::operation::TaskOperationOP
	clone() const override;

	void
	apply(
		core::pose::Pose const &,
		core::pack::task::PackerTask &
	) const override;

	void native_rotamers_map(
		NativeRotamersMap const & nat_ro_map
	);

	NativeRotamersMap const &
	native_rotamers_map() const;

	void parse_tag(
		TagCOP, DataMap &
	) override;

	static void provide_xml_schema( utility::tag::XMLSchemaDefinition & xsd );
	static std::string keyname() { return "ReadNativeRotamersFile"; }

private:
	NativeRotamersMap nat_ro_map_;
};

//////////////ReadRepeatNativeRotamersFile/////////////////

class ReadRepeatNativeRotamersFile : public ReadNativeRotamersFile
{
public:
	ReadNativeRotamersFile parent;

public:

	ReadRepeatNativeRotamersFile();
	virtual ~ReadRepeatNativeRotamersFile();

	core::pack::task::operation::TaskOperationOP
	clone() const override;

	void
	apply(
		core::pose::Pose const &,
		core::pack::task::PackerTask &
	) const override;

	static void provide_xml_schema( utility::tag::XMLSchemaDefinition & xsd );
	static std::string keyname();
};


//////////////AssemblyConstraintsMover/////////////////

class AssemblyConstraintsMover : public protocols::moves::Mover {

public:

	AssemblyConstraintsMover();

	AssemblyConstraintsMover(
		NativeRotamersMap const & nat_ro_map,
		core::Real neighbor_cutoff,
		core::Real base_native_bonus,
		core::Real base_native_pro_bonus
	);

	protocols::moves::MoverOP
	clone() const override;

	protocols::moves::MoverOP
	fresh_instance() const override;

	// XRW TEMP  std::string
	// XRW TEMP  get_name() const;

	void
	nat_ro_map(
		NativeRotamersMap const & nat_ro_map
	);

	void
	neighbor_cutoff(
		core::Real neighbor_cutoff
	);

	void
	base_native_bonus(
		core::Real base_native_bonus
	);

	void
	apply(
		core::pose::Pose & pose
	) override;

	void
	apply_repeat(
		core::pose::Pose & pose
	);

	void
	parse_my_tag(
		TagCOP tag,
		basic::datacache::DataMap & /*data*/,
		protocols::filters::Filters_map const & /*filters*/,
		protocols::moves::Movers_map const & /*movers*/,
		core::pose::Pose const & /*pose*/
	) override;

	std::string
	get_name() const override;

	static
	std::string
	mover_name();

	static
	void
	provide_xml_schema( utility::tag::XMLSchemaDefinition & xsd );


private:

	NativeRotamersMap nat_ro_map_;

	//Only favor 'natives' that have >= this many neighbors
	core::Real neighbor_cutoff_;

	//Favor all 'natives' by this amount (in REU)
	core::Real base_native_bonus_;

	core::Real base_native_pro_bonus_; // specifically for proline

};

} //sewing
} //protocols

#endif
