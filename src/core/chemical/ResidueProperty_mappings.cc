// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW CoMotion, email: license@uw.edu.

/// @file    core/chemical/ResidueProperty_mappings.cc
/// @brief   Method definitions for private static methods declared in ResidueProperties.hh.
/// @author  Labonte <JWLabonte@jhu.edu>
/// @note    DO NOT EDIT THIS FILE DIRECTLY!  It is auto-generated.
/// If you wish to edit it, modify the update_ResidueType_enum_files.py script.
/// It is because it is auto-generated that these class methods are not defined in ResidueProperties.cc.

// Unit header
#include <core/chemical/ResidueProperties.hh>

// Utility header
#include <utility/vector1.hh>
#include <utility/excn/Exceptions.hh>

// C++ headers
#include <map>

namespace core {
namespace chemical {

using namespace core;

// Get the ResidueProperty enum value from the corresponding sting.
// This private static class method is declared in ResidueProperties.hh.
// If adding a new property, DO NOT MANUALLY EDIT THIS ENUMERATOR DEFINITION.
// Instead, add it to general_properties.list, and run the update_ResidueType_enum_files.py script.
ResidueProperty const &
ResidueProperties::get_property_from_string( std::string const & property )
{
	using namespace std;
	using namespace utility::excn;

	// This line is only executed once.
	static map< string, ResidueProperty > * PROPERTY_MAP = NULL;

	// If statement ensures that the data is only created once, i.e., is constant.
	if ( ! PROPERTY_MAP ) {
		// A map of ResidueProperty enum values keyed by corresponding string.
		PROPERTY_MAP = new map< string, ResidueProperty >;

		PROPERTY_MAP->insert( make_pair( "POLYMER", POLYMER ) );
		PROPERTY_MAP->insert( make_pair( "LIGAND", LIGAND ) );
		PROPERTY_MAP->insert( make_pair( "PROTEIN", PROTEIN ) );
		PROPERTY_MAP->insert( make_pair( "CANONICAL_AA", CANONICAL_AA ) );
		PROPERTY_MAP->insert( make_pair( "CANONICAL_NUCLEIC", CANONICAL_NUCLEIC ) );
		PROPERTY_MAP->insert( make_pair( "DNA", DNA ) );
		PROPERTY_MAP->insert( make_pair( "RNA", RNA ) );
		PROPERTY_MAP->insert( make_pair( "PNA", PNA ) );
		PROPERTY_MAP->insert( make_pair( "PEPTOID", PEPTOID ) );
		PROPERTY_MAP->insert( make_pair( "CARBOHYDRATE", CARBOHYDRATE ) );
		PROPERTY_MAP->insert( make_pair( "LIPID", LIPID ) );
		PROPERTY_MAP->insert( make_pair( "TERPENE", TERPENE ) );
		PROPERTY_MAP->insert( make_pair( "SRI", SRI ) );
		PROPERTY_MAP->insert( make_pair( "TRIAZOLE_LINKER", TRIAZOLE_LINKER ) );
		PROPERTY_MAP->insert( make_pair( "METAL", METAL ) );
		PROPERTY_MAP->insert( make_pair( "SURFACE", SURFACE ) );
		PROPERTY_MAP->insert( make_pair( "WATER", WATER ) );
		PROPERTY_MAP->insert( make_pair( "SOLVENT", SOLVENT ) );
		PROPERTY_MAP->insert( make_pair( "VIRTUAL_RESIDUE", VIRTUAL_RESIDUE ) );
		PROPERTY_MAP->insert( make_pair( "INVERTED_VIRTUAL_RESIDUE", INVERTED_VIRTUAL_RESIDUE ) );
		PROPERTY_MAP->insert( make_pair( "TERMINUS", TERMINUS ) );
		PROPERTY_MAP->insert( make_pair( "UPPERTERM_CAP", UPPERTERM_CAP ) );
		PROPERTY_MAP->insert( make_pair( "LOWERTERM_CAP", LOWERTERM_CAP ) );
		PROPERTY_MAP->insert( make_pair( "LOWER_TERMINUS", LOWER_TERMINUS ) );
		PROPERTY_MAP->insert( make_pair( "UPPER_TERMINUS", UPPER_TERMINUS ) );
		PROPERTY_MAP->insert( make_pair( "BRANCH_LOWER_TERMINUS", BRANCH_LOWER_TERMINUS ) );
		PROPERTY_MAP->insert( make_pair( "BRANCH_POINT", BRANCH_POINT ) );
		PROPERTY_MAP->insert( make_pair( "LOWERTERM_TRUNC", LOWERTERM_TRUNC ) );
		PROPERTY_MAP->insert( make_pair( "UPPERTERM_TRUNC", UPPERTERM_TRUNC ) );
		PROPERTY_MAP->insert( make_pair( "COARSE", COARSE ) );
		PROPERTY_MAP->insert( make_pair( "ADDUCT", ADDUCT ) );
		PROPERTY_MAP->insert( make_pair( "SC_ORBITALS", SC_ORBITALS ) );
		PROPERTY_MAP->insert( make_pair( "FRAGMENT", FRAGMENT ) );
		PROPERTY_MAP->insert( make_pair( "POLAR", POLAR ) );
		PROPERTY_MAP->insert( make_pair( "HYDROPHOBIC", HYDROPHOBIC ) );
		PROPERTY_MAP->insert( make_pair( "CHARGED", CHARGED ) );
		PROPERTY_MAP->insert( make_pair( "NEGATIVE_CHARGE", NEGATIVE_CHARGE ) );
		PROPERTY_MAP->insert( make_pair( "POSITIVE_CHARGE", POSITIVE_CHARGE ) );
		PROPERTY_MAP->insert( make_pair( "AROMATIC", AROMATIC ) );
		PROPERTY_MAP->insert( make_pair( "ALIPHATIC", ALIPHATIC ) );
		PROPERTY_MAP->insert( make_pair( "CYCLIC", CYCLIC ) );
		PROPERTY_MAP->insert( make_pair( "METALBINDING", METALBINDING ) );
		PROPERTY_MAP->insert( make_pair( "SIDECHAIN_THIOL", SIDECHAIN_THIOL ) );
		PROPERTY_MAP->insert( make_pair( "DISULFIDE_BONDED", DISULFIDE_BONDED ) );
		PROPERTY_MAP->insert( make_pair( "ELECTROPHILE", ELECTROPHILE ) );
		PROPERTY_MAP->insert( make_pair( "SIDECHAIN_AMINE", SIDECHAIN_AMINE ) );
		PROPERTY_MAP->insert( make_pair( "N_METHYLATED", N_METHYLATED ) );
		PROPERTY_MAP->insert( make_pair( "MEMBRANE", MEMBRANE ) );
		PROPERTY_MAP->insert( make_pair( "PHOSPHONATE", PHOSPHONATE ) );
		PROPERTY_MAP->insert( make_pair( "PHOSPHONATE_UPPER", PHOSPHONATE_UPPER ) );
		PROPERTY_MAP->insert( make_pair( "ACETYLATED_NTERMINUS", ACETYLATED_NTERMINUS ) );
		PROPERTY_MAP->insert( make_pair( "METHYLATED_CTERMINUS", METHYLATED_CTERMINUS ) );
		PROPERTY_MAP->insert( make_pair( "ALPHA_AA", ALPHA_AA ) );
		PROPERTY_MAP->insert( make_pair( "BETA_AA", BETA_AA ) );
		PROPERTY_MAP->insert( make_pair( "GAMMA_AA", GAMMA_AA ) );
		PROPERTY_MAP->insert( make_pair( "L_AA", L_AA ) );
		PROPERTY_MAP->insert( make_pair( "D_AA", D_AA ) );
		PROPERTY_MAP->insert( make_pair( "ACHIRAL_BACKBONE", ACHIRAL_BACKBONE ) );
		PROPERTY_MAP->insert( make_pair( "TAUTOMER", TAUTOMER ) );
		PROPERTY_MAP->insert( make_pair( "PURINE", PURINE ) );
		PROPERTY_MAP->insert( make_pair( "PYRIMIDINE", PYRIMIDINE ) );
		PROPERTY_MAP->insert( make_pair( "L_RNA", L_RNA ) );
		PROPERTY_MAP->insert( make_pair( "D_RNA", D_RNA ) );
		PROPERTY_MAP->insert( make_pair( "TRIOSE", TRIOSE ) );
		PROPERTY_MAP->insert( make_pair( "TETROSE", TETROSE ) );
		PROPERTY_MAP->insert( make_pair( "PENTOSE", PENTOSE ) );
		PROPERTY_MAP->insert( make_pair( "HEXOSE", HEXOSE ) );
		PROPERTY_MAP->insert( make_pair( "HEPTOSE", HEPTOSE ) );
		PROPERTY_MAP->insert( make_pair( "OCTOSE", OCTOSE ) );
		PROPERTY_MAP->insert( make_pair( "NONOSE", NONOSE ) );
		PROPERTY_MAP->insert( make_pair( "ALDOSE", ALDOSE ) );
		PROPERTY_MAP->insert( make_pair( "KETOSE", KETOSE ) );
		PROPERTY_MAP->insert( make_pair( "L_SUGAR", L_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "D_SUGAR", D_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "OXIROSE", OXIROSE ) );
		PROPERTY_MAP->insert( make_pair( "OXETOSE", OXETOSE ) );
		PROPERTY_MAP->insert( make_pair( "FURANOSE", FURANOSE ) );
		PROPERTY_MAP->insert( make_pair( "PYRANOSE", PYRANOSE ) );
		PROPERTY_MAP->insert( make_pair( "SEPTANOSE", SEPTANOSE ) );
		PROPERTY_MAP->insert( make_pair( "ALPHA_SUGAR", ALPHA_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "BETA_SUGAR", BETA_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "SIALIC_ACID", SIALIC_ACID ) );
		PROPERTY_MAP->insert( make_pair( "C1_MODIFIED", C1_MODIFIED ) );
		PROPERTY_MAP->insert( make_pair( "C2_MODIFIED", C2_MODIFIED ) );
		PROPERTY_MAP->insert( make_pair( "C3_MODIFIED", C3_MODIFIED ) );
		PROPERTY_MAP->insert( make_pair( "C4_MODIFIED", C4_MODIFIED ) );
		PROPERTY_MAP->insert( make_pair( "C5_MODIFIED", C5_MODIFIED ) );
		PROPERTY_MAP->insert( make_pair( "C6_MODIFIED", C6_MODIFIED ) );
		PROPERTY_MAP->insert( make_pair( "C7_MODIFIED", C7_MODIFIED ) );
		PROPERTY_MAP->insert( make_pair( "C8_MODIFIED", C8_MODIFIED ) );
		PROPERTY_MAP->insert( make_pair( "C9_MODIFIED", C9_MODIFIED ) );
		PROPERTY_MAP->insert( make_pair( "GLYCOSIDE", GLYCOSIDE ) );
		PROPERTY_MAP->insert( make_pair( "ALDONIC_ACID", ALDONIC_ACID ) );
		PROPERTY_MAP->insert( make_pair( "URONIC_ACID", URONIC_ACID ) );
		PROPERTY_MAP->insert( make_pair( "DEOXY_SUGAR", DEOXY_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "AMINO_SUGAR", AMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "ACETYLAMINO_SUGAR", ACETYLAMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "ACETYL_SUGAR", ACETYL_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "R3PRIMEHYDROXYBUTYRYLAMINO_SUGAR", R3PRIMEHYDROXYBUTYRYLAMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "SULFATED_SUGAR", SULFATED_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "SULFOAMINO_SUGAR", SULFOAMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "C_METHYLATED_SUGAR", C_METHYLATED_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "PHOSPHATE", PHOSPHATE ) );
	}

	if ( ! ( *PROPERTY_MAP ).count( property ) ) {
		throw EXCN_Msg_Exception( "Rosetta does not recognize the property: " + property +
				"; has it been added to general_properties.list?" );
	}

	return ( *PROPERTY_MAP )[ property ];
}

// Get a string from the corresponding ResidueProperty enum value.
// This private static class method is declared in ResidueProperties.hh.
// If adding a new property, DO NOT MANUALLY EDIT THIS ENUMERATOR DEFINITION.
// Instead, add it to general_properties.list, and run the update_ResidueType_enum_files.py script.
std::string const &
ResidueProperties::get_string_from_property( ResidueProperty const property )
{
	using namespace std;
	using namespace utility;

	// This line is only executed once.
	static vector1< string > * STRING_LIST = NULL;

	// If statement ensures that the data is only created once, i.e., is constant.
	if ( ! STRING_LIST ) {
		// A vector mapping ResidueProperty enum values to their corresponding strings.
		STRING_LIST = new vector1< string >;
		STRING_LIST->resize( N_PROPERTIES, "" );

		( *STRING_LIST )[ POLYMER ] = "POLYMER";
		( *STRING_LIST )[ LIGAND ] = "LIGAND";
		( *STRING_LIST )[ PROTEIN ] = "PROTEIN";
		( *STRING_LIST )[ CANONICAL_AA ] = "CANONICAL_AA";
		( *STRING_LIST )[ CANONICAL_NUCLEIC ] = "CANONICAL_NUCLEIC";
		( *STRING_LIST )[ DNA ] = "DNA";
		( *STRING_LIST )[ RNA ] = "RNA";
		( *STRING_LIST )[ PNA ] = "PNA";
		( *STRING_LIST )[ PEPTOID ] = "PEPTOID";
		( *STRING_LIST )[ CARBOHYDRATE ] = "CARBOHYDRATE";
		( *STRING_LIST )[ LIPID ] = "LIPID";
		( *STRING_LIST )[ TERPENE ] = "TERPENE";
		( *STRING_LIST )[ SRI ] = "SRI";
		( *STRING_LIST )[ TRIAZOLE_LINKER ] = "TRIAZOLE_LINKER";
		( *STRING_LIST )[ METAL ] = "METAL";
		( *STRING_LIST )[ SURFACE ] = "SURFACE";
		( *STRING_LIST )[ WATER ] = "WATER";
		( *STRING_LIST )[ SOLVENT ] = "SOLVENT";
		( *STRING_LIST )[ VIRTUAL_RESIDUE ] = "VIRTUAL_RESIDUE";
		( *STRING_LIST )[ INVERTED_VIRTUAL_RESIDUE ] = "INVERTED_VIRTUAL_RESIDUE";
		( *STRING_LIST )[ TERMINUS ] = "TERMINUS";
		( *STRING_LIST )[ UPPERTERM_CAP ] = "UPPERTERM_CAP";
		( *STRING_LIST )[ LOWERTERM_CAP ] = "LOWERTERM_CAP";
		( *STRING_LIST )[ LOWER_TERMINUS ] = "LOWER_TERMINUS";
		( *STRING_LIST )[ UPPER_TERMINUS ] = "UPPER_TERMINUS";
		( *STRING_LIST )[ BRANCH_LOWER_TERMINUS ] = "BRANCH_LOWER_TERMINUS";
		( *STRING_LIST )[ BRANCH_POINT ] = "BRANCH_POINT";
		( *STRING_LIST )[ LOWERTERM_TRUNC ] = "LOWERTERM_TRUNC";
		( *STRING_LIST )[ UPPERTERM_TRUNC ] = "UPPERTERM_TRUNC";
		( *STRING_LIST )[ COARSE ] = "COARSE";
		( *STRING_LIST )[ ADDUCT ] = "ADDUCT";
		( *STRING_LIST )[ SC_ORBITALS ] = "SC_ORBITALS";
		( *STRING_LIST )[ FRAGMENT ] = "FRAGMENT";
		( *STRING_LIST )[ POLAR ] = "POLAR";
		( *STRING_LIST )[ HYDROPHOBIC ] = "HYDROPHOBIC";
		( *STRING_LIST )[ CHARGED ] = "CHARGED";
		( *STRING_LIST )[ NEGATIVE_CHARGE ] = "NEGATIVE_CHARGE";
		( *STRING_LIST )[ POSITIVE_CHARGE ] = "POSITIVE_CHARGE";
		( *STRING_LIST )[ AROMATIC ] = "AROMATIC";
		( *STRING_LIST )[ ALIPHATIC ] = "ALIPHATIC";
		( *STRING_LIST )[ CYCLIC ] = "CYCLIC";
		( *STRING_LIST )[ METALBINDING ] = "METALBINDING";
		( *STRING_LIST )[ SIDECHAIN_THIOL ] = "SIDECHAIN_THIOL";
		( *STRING_LIST )[ DISULFIDE_BONDED ] = "DISULFIDE_BONDED";
		( *STRING_LIST )[ ELECTROPHILE ] = "ELECTROPHILE";
		( *STRING_LIST )[ SIDECHAIN_AMINE ] = "SIDECHAIN_AMINE";
		( *STRING_LIST )[ N_METHYLATED ] = "N_METHYLATED";
		( *STRING_LIST )[ MEMBRANE ] = "MEMBRANE";
		( *STRING_LIST )[ PHOSPHONATE ] = "PHOSPHONATE";
		( *STRING_LIST )[ PHOSPHONATE_UPPER ] = "PHOSPHONATE_UPPER";
		( *STRING_LIST )[ ACETYLATED_NTERMINUS ] = "ACETYLATED_NTERMINUS";
		( *STRING_LIST )[ METHYLATED_CTERMINUS ] = "METHYLATED_CTERMINUS";
		( *STRING_LIST )[ ALPHA_AA ] = "ALPHA_AA";
		( *STRING_LIST )[ BETA_AA ] = "BETA_AA";
		( *STRING_LIST )[ GAMMA_AA ] = "GAMMA_AA";
		( *STRING_LIST )[ L_AA ] = "L_AA";
		( *STRING_LIST )[ D_AA ] = "D_AA";
		( *STRING_LIST )[ ACHIRAL_BACKBONE ] = "ACHIRAL_BACKBONE";
		( *STRING_LIST )[ TAUTOMER ] = "TAUTOMER";
		( *STRING_LIST )[ PURINE ] = "PURINE";
		( *STRING_LIST )[ PYRIMIDINE ] = "PYRIMIDINE";
		( *STRING_LIST )[ L_RNA ] = "L_RNA";
		( *STRING_LIST )[ D_RNA ] = "D_RNA";
		( *STRING_LIST )[ TRIOSE ] = "TRIOSE";
		( *STRING_LIST )[ TETROSE ] = "TETROSE";
		( *STRING_LIST )[ PENTOSE ] = "PENTOSE";
		( *STRING_LIST )[ HEXOSE ] = "HEXOSE";
		( *STRING_LIST )[ HEPTOSE ] = "HEPTOSE";
		( *STRING_LIST )[ OCTOSE ] = "OCTOSE";
		( *STRING_LIST )[ NONOSE ] = "NONOSE";
		( *STRING_LIST )[ ALDOSE ] = "ALDOSE";
		( *STRING_LIST )[ KETOSE ] = "KETOSE";
		( *STRING_LIST )[ L_SUGAR ] = "L_SUGAR";
		( *STRING_LIST )[ D_SUGAR ] = "D_SUGAR";
		( *STRING_LIST )[ OXIROSE ] = "OXIROSE";
		( *STRING_LIST )[ OXETOSE ] = "OXETOSE";
		( *STRING_LIST )[ FURANOSE ] = "FURANOSE";
		( *STRING_LIST )[ PYRANOSE ] = "PYRANOSE";
		( *STRING_LIST )[ SEPTANOSE ] = "SEPTANOSE";
		( *STRING_LIST )[ ALPHA_SUGAR ] = "ALPHA_SUGAR";
		( *STRING_LIST )[ BETA_SUGAR ] = "BETA_SUGAR";
		( *STRING_LIST )[ SIALIC_ACID ] = "SIALIC_ACID";
		( *STRING_LIST )[ C1_MODIFIED ] = "C1_MODIFIED";
		( *STRING_LIST )[ C2_MODIFIED ] = "C2_MODIFIED";
		( *STRING_LIST )[ C3_MODIFIED ] = "C3_MODIFIED";
		( *STRING_LIST )[ C4_MODIFIED ] = "C4_MODIFIED";
		( *STRING_LIST )[ C5_MODIFIED ] = "C5_MODIFIED";
		( *STRING_LIST )[ C6_MODIFIED ] = "C6_MODIFIED";
		( *STRING_LIST )[ C7_MODIFIED ] = "C7_MODIFIED";
		( *STRING_LIST )[ C8_MODIFIED ] = "C8_MODIFIED";
		( *STRING_LIST )[ C9_MODIFIED ] = "C9_MODIFIED";
		( *STRING_LIST )[ GLYCOSIDE ] = "GLYCOSIDE";
		( *STRING_LIST )[ ALDONIC_ACID ] = "ALDONIC_ACID";
		( *STRING_LIST )[ URONIC_ACID ] = "URONIC_ACID";
		( *STRING_LIST )[ DEOXY_SUGAR ] = "DEOXY_SUGAR";
		( *STRING_LIST )[ AMINO_SUGAR ] = "AMINO_SUGAR";
		( *STRING_LIST )[ ACETYLAMINO_SUGAR ] = "ACETYLAMINO_SUGAR";
		( *STRING_LIST )[ ACETYL_SUGAR ] = "ACETYL_SUGAR";
		( *STRING_LIST )[ R3PRIMEHYDROXYBUTYRYLAMINO_SUGAR ] = "R3PRIMEHYDROXYBUTYRYLAMINO_SUGAR";
		( *STRING_LIST )[ SULFATED_SUGAR ] = "SULFATED_SUGAR";
		( *STRING_LIST )[ SULFOAMINO_SUGAR ] = "SULFOAMINO_SUGAR";
		( *STRING_LIST )[ C_METHYLATED_SUGAR ] = "C_METHYLATED_SUGAR";
		( *STRING_LIST )[ PHOSPHATE ] = "PHOSPHATE";
	}

	return ( *STRING_LIST )[ property ];
}

}  // namespace chemical
}  // namespace core
