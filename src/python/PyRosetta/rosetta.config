# Binder config for Rosetta
+default_static_pointer_return_value_policy           pybind11::return_value_policy::reference
+default_static_lvalue_reference_return_value_policy  pybind11::return_value_policy::reference
+default_static_rvalue_reference_return_value_policy  pybind11::return_value_policy::move

+default_member_pointer_return_value_policy           pybind11::return_value_policy::reference
+default_member_lvalue_reference_return_value_policy  pybind11::return_value_policy::reference_internal
+default_member_rvalue_reference_return_value_policy  pybind11::return_value_policy::move

-namespace boost
+namespace ObjexxFCL
+namespace utility
+namespace numeric
+namespace basic
+namespace core
+namespace protocols

#-namespace utility::keys
#-namespace utility::pointer
-class utility::pointer::ReferenceCount
-class std::__weak_ptr

#-namespace utility::options
#-namespace basic::options
-namespace protocols::boinc


-include <boost/format/internals.hpp>
-include <boost/format/group.hpp>
-include <boost/graph/detail/adjacency_list.hpp>
-include <boost/function/function_template.hpp>


+include <python/PyRosetta/binder/stl_binders.hpp>
+include <python/PyRosetta/binder/rosetta/rosetta_binders.hpp>

+binder std::vector binder::vector_binder
+binder std::map    binder::map_binder

#binder utility::vectorL rosetta_binders::vectorL_binder
+binder utility::vector0 rosetta_binders::vector0_binder
+binder utility::vector1 rosetta_binders::vector1_binder

-class utility::vectorL

+add_on_binder numeric::xyzVector rosetta_binders::xyzVector_add_on_binder


# CifParse, objects not in namespace and relative include path is used (ie #include "...")
-class Serializer
-class ISTable
-class Block


# template operator() creation for wrong numbers of arguments (depends on second template parameter).
-class fem::arr_ref
-class fem::arr_cref

# Mac specifics
-class std::__bit_reference
-class std::__bit_const_reference

# Mac specifics: ld: illegal text reloc in '__Z16bind_std_sstreamRNSt3__18functionIFRN8pybind116moduleERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE' to '__ZNSt3__19basic_iosIcNS_11char_traitsIcEEE5imbueERKNS_6localeE' for architecture x86_64
# -function std::basic_ios::widen
# -function std::basic_ios::narrow
# -function std::basic_ios::imbue
# -function std::basic_ios::fill
# -function std::basic_ios::rdbuf
# -function std::basic_ios::tie
-class std::basic_ios
-class std::basic_istream
-class std::basic_ostream



# ObjexxFCL

# Dimension copy constructor define as explicit and instead create a reference to orginal object so operator returning copy of the object could not be binded
-function ObjexxFCL::Dimension::operator++
-function ObjexxFCL::Dimension::operator--

# no '*' and '/' operators for template types defined
-function ObjexxFCL::FArray<std::string>::operator*=
-function ObjexxFCL::FArray<std::string>::operator/=
-function ObjexxFCL::FArray<utility::vector1<double, std::allocator<double> > >::operator*=
-function ObjexxFCL::FArray<utility::vector1<double, std::allocator<double> > >::operator/=
-function ObjexxFCL::FArray<std::vector<unsigned long, std::allocator<unsigned long> > >::operator*=
-function ObjexxFCL::FArray<std::vector<unsigned long, std::allocator<unsigned long> > >::operator/=
-function ObjexxFCL::FArray<utility::vector1<unsigned int, std::allocator<unsigned int> > >::operator*=
-function ObjexxFCL::FArray<utility::vector1<unsigned int, std::allocator<unsigned int> > >::operator/=
-function ObjexxFCL::FArray<utility::vector1<numeric::xyzVector<double>, std::allocator<numeric::xyzVector<double> > > >::operator*=
-function ObjexxFCL::FArray<utility::vector1<numeric::xyzVector<double>, std::allocator<numeric::xyzVector<double> > > >::operator/=
-function ObjexxFCL::FArray2<std::string>::operator*=
-function ObjexxFCL::FArray2<std::string>::operator/=
-function ObjexxFCL::FArray3<utility::vector1<double, std::allocator<double> > >::operator*=
-function ObjexxFCL::FArray3<utility::vector1<double, std::allocator<double> > >::operator/=
-function ObjexxFCL::FArray3<std::vector<unsigned long, std::allocator<unsigned long> > >::operator*=
-function ObjexxFCL::FArray3<std::vector<unsigned long, std::allocator<unsigned long> > >::operator/=
-function ObjexxFCL::FArray3<utility::vector1<unsigned int, std::allocator<unsigned int> > >::operator*=
-function ObjexxFCL::FArray3<utility::vector1<unsigned int, std::allocator<unsigned int> > >::operator/=
-function ObjexxFCL::FArray3<utility::vector1<numeric::xyzVector<double>, std::allocator<numeric::xyzVector<double> > > >::operator*=
-function ObjexxFCL::FArray3<utility::vector1<numeric::xyzVector<double>, std::allocator<numeric::xyzVector<double> > > >::operator/=
-function ObjexxFCL::FArray2D<std::string >::operator*=
-function ObjexxFCL::FArray2D<std::string >::operator/=
-function ObjexxFCL::FArray3D<utility::vector1<double, std::allocator<double> > >::operator*=
-function ObjexxFCL::FArray3D<utility::vector1<double, std::allocator<double> > >::operator/=
-function ObjexxFCL::FArray3D<std::vector<unsigned long, std::allocator<unsigned long> > >::operator*=
-function ObjexxFCL::FArray3D<std::vector<unsigned long, std::allocator<unsigned long> > >::operator/=
-function ObjexxFCL::FArray3D<utility::vector1<unsigned int, std::allocator<unsigned int> > >::operator*=
-function ObjexxFCL::FArray3D<utility::vector1<unsigned int, std::allocator<unsigned int> > >::operator/=
-function ObjexxFCL::FArray3D<utility::vector1<numeric::xyzVector<double>, std::allocator<numeric::xyzVector<double> > > >::operator*=
-function ObjexxFCL::FArray3D<utility::vector1<numeric::xyzVector<double>, std::allocator<numeric::xyzVector<double> > > >::operator/=

# no int to T conversion defined, could not instantiate template
-function ObjexxFCL::FArray2<std::string>::is_identity
-function ObjexxFCL::FArray2<std::string>::to_identity
-function ObjexxFCL::FArray2D<std::string>::identity

# no corresponding operator is defined...
-function ObjexxFCL::FArray<std::string>::operator-=
-function ObjexxFCL::FArray2<std::string>::operator-=
-function ObjexxFCL::FArray2D<std::string>::operator-=
-function utility::fixedsizearray1iterator<unsigned long, 4>::operator+=
-function utility::fixedsizearray1iterator<unsigned long, 4>::operator-=
-function utility::fixedsizearray1iterator<double, 4>::operator+=
-function utility::fixedsizearray1iterator<double, 4>::operator-=
-function utility::fixedsizearray1iterator<double, 5>::operator+=
-function utility::fixedsizearray1iterator<double, 5>::operator-=

# problem with bool specialization? error: address of overloaded function 'swap' does not match required type 'void (core::id::DOF_ID_Map<bool> &, core::id::DOF_ID_Map<bool> &)'
-function core::id::swap

-class std::_Rb_tree_iterator
#-function std::map::insert
#-function std::multimap::insert

-function std::list::unique
-function std::list::merge
-function std::list::sort
-function std::list::remove



# bag of pointers?
-class std::list<const protocols::match::Hit *,std::allocator<const protocols::match::Hit *>>


-class std::list<std::pair<double, core::pose::rna::BaseStack>,std::allocator<std::pair<double, core::pose::rna::BaseStack> >>
