// File: T30_include_incl_a_include.cpp
#include <T30.include.incl.a.include> // aaaa::A
#include <sstream> // __str__

#include <pybind11/pybind11.h>

#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>);
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*);
#endif

void bind_T30_include_incl_a_include(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	{ // aaaa::A file:T30.include.incl.a.include line:7
		pybind11::class_<aaaa::A, std::shared_ptr<aaaa::A>> cl(M("aaaa"), "A", "");
		pybind11::handle cl_type = cl;

		cl.def(pybind11::init<>());
	}
}


// File: T30_include_incl_b_include.cpp
#include <T30.include.incl.a.include> // aaaa::A
#include <T30.include.incl.b.include> // bbbb::B
#include <sstream> // __str__

#include <pybind11/pybind11.h>

#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>);
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*);
#endif

void bind_T30_include_incl_b_include(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	{ // bbbb::B file:T30.include.incl.b.include line:8
		pybind11::class_<bbbb::B<aaaa::A>, std::shared_ptr<bbbb::B<aaaa::A>>> cl(M("bbbb"), "B_aaaa_A_t", "");
		pybind11::handle cl_type = cl;

		cl.def(pybind11::init<>());
	}
}


// File: T30_include.cpp
#include <T30.include.hpp> // foo
#include <T30.include.incl.a.include> // aaaa::A
#include <T30.include.incl.b.include> // bbbb::B

#include <pybind11/pybind11.h>

#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>);
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*);
#endif

void bind_T30_include(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	// foo(class bbbb::B<class aaaa::A>) file:T30.include.hpp line:19
	M("").def("foo", (void (*)(class bbbb::B<class aaaa::A>)) &foo, "C++: foo(class bbbb::B<class aaaa::A>) --> void", pybind11::arg(""));

}


#include <map>
#include <memory>
#include <stdexcept>
#include <functional>

#include <pybind11/pybind11.h>

typedef std::function< pybind11::module & (std::string const &) > ModuleGetter;

void bind_T30_include_incl_a_include(std::function< pybind11::module &(std::string const &namespace_) > &M);
void bind_T30_include_incl_b_include(std::function< pybind11::module &(std::string const &namespace_) > &M);
void bind_T30_include(std::function< pybind11::module &(std::string const &namespace_) > &M);


PYBIND11_PLUGIN(T30_include) {
	std::map <std::string, std::shared_ptr<pybind11::module> > modules;
	ModuleGetter M = [&](std::string const &namespace_) -> pybind11::module & {
		auto it = modules.find(namespace_);
		if( it == modules.end() ) throw std::runtime_error("Attempt to access pybind11::module for namespace " + namespace_ + " before it was created!!!");
		return * it->second;
	};

	modules[""] = std::make_shared<pybind11::module>("T30_include", "T30_include module");

	std::vector< std::pair<std::string, std::string> > sub_modules {
		{"", "aaaa"},
		{"", "bbbb"},
	};
	for(auto &p : sub_modules ) modules[p.first.size() ? p.first+"::"+p.second : p.second] = std::make_shared<pybind11::module>( modules[p.first]->def_submodule(p.second.c_str(), ("Bindings for " + p.first + "::" + p.second + " namespace").c_str() ) );

	bind_T30_include_incl_a_include(M);
	bind_T30_include_incl_b_include(M);
	bind_T30_include(M);

	return modules[""]->ptr();
}

// Source list file: TEST/T30_include.sources
// T30_include.cpp
// T30_include_incl_a_include.cpp
// T30_include_incl_b_include.cpp
// T30_include.cpp

// Modules list file: TEST/T30_include.modules
// aaaa bbbb 
