// File: std/stl_vector.cpp
#include <initializer_list> // std::initializer_list
#include <iterator> // __gnu_cxx::__normal_iterator
#include <memory> // std::allocator
#include <memory> // std::allocator<int>::allocator
#include <memory> // std::allocator<int>::operator=
#include <sstream> // __str__
#include <vector> // std::vector
#include <vector> // std::vector<int, std::allocator<int> >::assign
#include <vector> // std::vector<int, std::allocator<int> >::at
#include <vector> // std::vector<int, std::allocator<int> >::back
#include <vector> // std::vector<int, std::allocator<int> >::begin
#include <vector> // std::vector<int, std::allocator<int> >::capacity
#include <vector> // std::vector<int, std::allocator<int> >::cbegin
#include <vector> // std::vector<int, std::allocator<int> >::cend
#include <vector> // std::vector<int, std::allocator<int> >::clear
#include <vector> // std::vector<int, std::allocator<int> >::data
#include <vector> // std::vector<int, std::allocator<int> >::empty
#include <vector> // std::vector<int, std::allocator<int> >::end
#include <vector> // std::vector<int, std::allocator<int> >::erase
#include <vector> // std::vector<int, std::allocator<int> >::front
#include <vector> // std::vector<int, std::allocator<int> >::insert
#include <vector> // std::vector<int, std::allocator<int> >::max_size
#include <vector> // std::vector<int, std::allocator<int> >::operator=
#include <vector> // std::vector<int, std::allocator<int> >::operator[]
#include <vector> // std::vector<int, std::allocator<int> >::pop_back
#include <vector> // std::vector<int, std::allocator<int> >::push_back
#include <vector> // std::vector<int, std::allocator<int> >::reserve
#include <vector> // std::vector<int, std::allocator<int> >::resize
#include <vector> // std::vector<int, std::allocator<int> >::shrink_to_fit
#include <vector> // std::vector<int, std::allocator<int> >::size
#include <vector> // std::vector<int, std::allocator<int> >::swap
#include <vector> // std::vector<int, std::allocator<int> >::vector

#include <pybind11/pybind11.h>

#include <stl_binders.hpp>

#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>);
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*);
#endif

void bind_std_stl_vector(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	// std::vector file:bits/stl_vector.h line:210
	binder::vector_binder<int,std::allocator<int>>(M("std"), "int", "std_allocator_int_t");

}


// File: T40_stl.cpp
#include <T40.stl.hpp> // foo
#include <initializer_list> // std::initializer_list
#include <iterator> // __gnu_cxx::__normal_iterator
#include <memory> // std::allocator
#include <memory> // std::allocator<int>::allocator
#include <memory> // std::allocator<int>::operator=
#include <vector> // std::vector
#include <vector> // std::vector<int, std::allocator<int> >::assign
#include <vector> // std::vector<int, std::allocator<int> >::at
#include <vector> // std::vector<int, std::allocator<int> >::back
#include <vector> // std::vector<int, std::allocator<int> >::begin
#include <vector> // std::vector<int, std::allocator<int> >::capacity
#include <vector> // std::vector<int, std::allocator<int> >::cbegin
#include <vector> // std::vector<int, std::allocator<int> >::cend
#include <vector> // std::vector<int, std::allocator<int> >::clear
#include <vector> // std::vector<int, std::allocator<int> >::data
#include <vector> // std::vector<int, std::allocator<int> >::empty
#include <vector> // std::vector<int, std::allocator<int> >::end
#include <vector> // std::vector<int, std::allocator<int> >::erase
#include <vector> // std::vector<int, std::allocator<int> >::front
#include <vector> // std::vector<int, std::allocator<int> >::insert
#include <vector> // std::vector<int, std::allocator<int> >::max_size
#include <vector> // std::vector<int, std::allocator<int> >::operator=
#include <vector> // std::vector<int, std::allocator<int> >::operator[]
#include <vector> // std::vector<int, std::allocator<int> >::pop_back
#include <vector> // std::vector<int, std::allocator<int> >::push_back
#include <vector> // std::vector<int, std::allocator<int> >::reserve
#include <vector> // std::vector<int, std::allocator<int> >::resize
#include <vector> // std::vector<int, std::allocator<int> >::shrink_to_fit
#include <vector> // std::vector<int, std::allocator<int> >::size
#include <vector> // std::vector<int, std::allocator<int> >::swap
#include <vector> // std::vector<int, std::allocator<int> >::vector

#include <pybind11/pybind11.h>

#include <stl_binders.hpp>

#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>);
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*);
#endif

void bind_T40_stl(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	// foo(class std::vector<int, class std::allocator<int> >) file:T40.stl.hpp line:18
	M("").def("foo", (void (*)(class std::vector<int, class std::allocator<int> >)) &foo, "C++: foo(class std::vector<int, class std::allocator<int> >) --> void", pybind11::arg(""));

}


#include <map>
#include <memory>
#include <stdexcept>
#include <functional>

#include <pybind11/pybind11.h>

typedef std::function< pybind11::module & (std::string const &) > ModuleGetter;

void bind_std_stl_vector(std::function< pybind11::module &(std::string const &namespace_) > &M);
void bind_T40_stl(std::function< pybind11::module &(std::string const &namespace_) > &M);


PYBIND11_PLUGIN(T40_stl) {
	std::map <std::string, std::shared_ptr<pybind11::module> > modules;
	ModuleGetter M = [&](std::string const &namespace_) -> pybind11::module & {
		auto it = modules.find(namespace_);
		if( it == modules.end() ) throw std::runtime_error("Attempt to access pybind11::module for namespace " + namespace_ + " before it was created!!!");
		return * it->second;
	};

	modules[""] = std::make_shared<pybind11::module>("T40_stl", "T40_stl module");

	std::vector< std::pair<std::string, std::string> > sub_modules {
		{"", "std"},
	};
	for(auto &p : sub_modules ) modules[p.first.size() ? p.first+"::"+p.second : p.second] = std::make_shared<pybind11::module>( modules[p.first]->def_submodule(p.second.c_str(), ("Bindings for " + p.first + "::" + p.second + " namespace").c_str() ) );

	bind_std_stl_vector(M);
	bind_T40_stl(M);

	return modules[""]->ptr();
}

// Source list file: TEST/T40_stl.sources
// T40_stl.cpp
// std/stl_vector.cpp
// T40_stl.cpp

// Modules list file: TEST/T40_stl.modules
// std 
